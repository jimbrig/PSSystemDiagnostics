{
  "AllStartupItems": [
    {
      "Name": "Alt-Tab Terminator",
      "Command": "\"C:\\Program Files\\Alt-Tab Terminator\\AltTabTer.exe\" /startup",
      "Location": "HKCU\\Run",
      "User": "jimmy"
    },
    {
      "Name": "OneDrive",
      "Command": "\"C:\\Program Files\\Microsoft OneDrive\\OneDrive.exe\" /background",
      "Location": "HKCU\\Run",
      "User": "jimmy"
    },
    {
      "Name": "GoogleDriveFS",
      "Command": "\"C:\\Program Files\\Google\\Drive File Stream\\108.0.1.0\\GoogleDriveFS.exe\" --startup_mode",
      "Location": "HKCU\\Run",
      "User": "jimmy"
    },
    {
      "Name": "Docker Desktop",
      "Command": "C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe",
      "Location": "HKCU\\Run",
      "User": "jimmy"
    },
    {
      "Name": "MicrosoftEdgeAutoLaunch_34C508D44B5EBBA178C0F19D8F4FBF30",
      "Command": "\"C:\\Program Files (x86)\\Microsoft\\Edge Dev\\Application\\msedge.exe\" --no-startup-window --win-session-start",
      "Location": "HKCU\\Run",
      "User": "jimmy"
    },
    {
      "Name": "PSDrive",
      "Command": {
        "CurrentLocation": "",
        "Name": "HKCU",
        "Provider": {
          "ImplementingType": {
            "IsCollectible": false,
            "DeclaringMethod": null,
            "FullName": "Microsoft.PowerShell.Commands.RegistryProvider",
            "AssemblyQualifiedName": "Microsoft.PowerShell.Commands.RegistryProvider, System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35",
            "Namespace": "Microsoft.PowerShell.Commands",
            "GUID": "44a9fa1a-7d61-3ecb-94ef-b075342b593a",
            "IsEnum": false,
            "IsByRefLike": false,
            "IsConstructedGenericType": false,
            "IsGenericType": false,
            "IsGenericTypeDefinition": false,
            "GenericParameterAttributes": null,
            "IsSZArray": false,
            "GenericParameterPosition": null,
            "ContainsGenericParameters": false,
            "StructLayoutAttribute": "System.Runtime.InteropServices.StructLayoutAttribute",
            "IsFunctionPointer": false,
            "IsUnmanagedFunctionPointer": false,
            "Name": "RegistryProvider",
            "DeclaringType": null,
            "Assembly": "System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35",
            "BaseType": "System.Management.Automation.Provider.NavigationCmdletProvider",
            "IsGenericParameter": false,
            "IsTypeDefinition": true,
            "IsSecurityCritical": true,
            "IsSecuritySafeCritical": false,
            "IsSecurityTransparent": false,
            "MemberType": 32,
            "MetadataToken": 33556360,
            "Module": "System.Management.Automation.dll",
            "ReflectedType": null,
            "TypeHandle": "System.RuntimeTypeHandle",
            "UnderlyingSystemType": "Microsoft.PowerShell.Commands.RegistryProvider",
            "GenericTypeParameters": "",
            "DeclaredConstructors": "Void .ctor() Void .cctor()",
            "DeclaredEvents": "",
            "DeclaredFields": "System.Management.Automation.PSTraceSource s_tracer System.String[] s_hiveNames System.String[] s_hiveShortNames Microsoft.Win32.RegistryKey[] s_wellKnownHives Microsoft.PowerShell.Commands.Internal.TransactedRegistryKey[] s_wellKnownHivesTx System.String ProviderName System.String charactersThatNeedEscaping",
            "DeclaredMembers": "Char get_AltItemSeparator() System.Management.Automation.PSDriveInfo NewDrive(System.Management.Automation.PSDriveInfo) System.Collections.ObjectModel.Collection`1[System.Management.Automation.PSDriveInfo] InitializeDefaultDrives() Boolean IsValidPath(System.String) Void GetItem(System.String) Void SetItem(System.String, System.Object) System.Object SetItemDynamicParameters(System.String, System.Object) Void ClearItem(System.String) Void GetChildItems(System.String, Boolean, UInt32) Void GetChildNames(System.String, System.Management.Automation.ReturnContainers) System.String EscapeSpecialChars(System.String) System.String EscapeChildName(System.String) Void RenameItem(System.String, System.String) Void NewItem(System.String, System.String, System.Object) Void RemoveItem(System.String, Boolean) Boolean ItemExists(System.String) Boolean HasChildItems(System.String) Void CopyItem(System.String, System.String, Boolean) Boolean CopyRegistryKey(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.String, Boolean, Boolean, Boolean) Boolean ErrorIfDestinationIsSourceOrChildOfSource(System.String, System.String) Boolean IsItemContainer(System.String) Void MoveItem(System.String, System.String) Void MoveRegistryItem(System.String, System.String) Void GetProperty(System.String, System.Collections.ObjectModel.Collection`1[System.String]) Void SetProperty(System.String, System.Management.Automation.PSObject) System.Object SetPropertyDynamicParameters(System.String, System.Management.Automation.PSObject) Void ClearProperty(System.String, System.Collections.ObjectModel.Collection`1[System.String]) System.Object GetPropertyDynamicParameters(System.String, System.Collections.ObjectModel.Collection`1[System.String]) System.Object ClearPropertyDynamicParameters(System.String, System.Collections.ObjectModel.Collection`1[System.String]) Void NewProperty(System.String, System.String, System.String, System.Object) Void RemoveProperty(System.String, System.String) Void RenameProperty(System.String, System.String, System.String) Void CopyProperty(System.String, System.String, System.String, System.String) Void MoveProperty(System.String, System.String, System.String, System.String) System.String GetParentPath(System.String, System.String) System.String GetChildName(System.String) System.String EnsureDriveIsRooted(System.String) System.Object NewPropertyDynamicParameters(System.String, System.String, System.String, System.Object) System.Object RemovePropertyDynamicParameters(System.String, System.String) System.Object RenamePropertyDynamicParameters(System.String, System.String, System.String) System.Object CopyPropertyDynamicParameters(System.String, System.String, System.String, System.String) System.Object MovePropertyDynamicParameters(System.String, System.String, System.String, System.String) Void CopyProperty(Microsoft.PowerShell.Commands.IRegistryWrapper, Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.String, Boolean) Void MoveProperty(Microsoft.PowerShell.Commands.IRegistryWrapper, Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.String) System.String NormalizePath(System.String) Boolean HasRelativePathTokens(System.String) Void GetFilteredRegistryKeyProperties(System.String, System.Collections.ObjectModel.Collection`1[System.String], Boolean, Boolean, Microsoft.PowerShell.Commands.IRegistryWrapper ByRef, System.Collections.ObjectModel.Collection`1[System.String] ByRef) Void WriteErrorIfPerfectMatchNotFound(Boolean, System.String, System.String) System.Object ResetRegistryKeyValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) Boolean IsHiveContainer(System.String) Boolean CheckOperationNotAllowedOnHiveContainer(System.String) Boolean CheckOperationNotAllowedOnHiveContainer(System.String, System.String) Microsoft.PowerShell.Commands.IRegistryWrapper GetHiveRoot(System.String) Boolean CreateIntermediateKeys(System.String) Microsoft.PowerShell.Commands.IRegistryWrapper GetRegkeyForPathWriteIfError(System.String, Boolean) Microsoft.PowerShell.Commands.IRegistryWrapper GetRegkeyForPath(System.String, Boolean) Void SetRegistryValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.Object, Microsoft.Win32.RegistryValueKind, System.String) Void SetRegistryValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.Object, Microsoft.Win32.RegistryValueKind, System.String, Boolean) Void WriteWrappedPropertyObject(System.Object, System.String, System.String) System.Object ConvertValueToKind(System.Object, Microsoft.Win32.RegistryValueKind) Microsoft.Win32.RegistryValueKind GetValueKindFromObject(System.Object) Microsoft.Win32.RegistryValueKind GetValueKindForProperty(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) System.Object ReadExistingKeyValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) Void WriteRegistryItemObject(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) Boolean ParseKind(System.String, Microsoft.Win32.RegistryValueKind ByRef) System.String get_LocalizedDefaultToken() System.String GetPropertyName(System.String) Void GetSecurityDescriptor(System.String, System.Security.AccessControl.AccessControlSections) Void SetSecurityDescriptor(System.String, System.Security.AccessControl.ObjectSecurity) System.Security.AccessControl.ObjectSecurity NewSecurityDescriptorFromPath(System.String, System.Security.AccessControl.AccessControlSections) System.Security.AccessControl.ObjectSecurity NewSecurityDescriptorOfType(System.String, System.Security.AccessControl.AccessControlSections) Void .ctor() Void .cctor() Char AltItemSeparator System.String LocalizedDefaultToken System.Management.Automation.PSTraceSource s_tracer System.String[] s_hiveNames System.String[] s_hiveShortNames Microsoft.Win32.RegistryKey[] s_wellKnownHives Microsoft.PowerShell.Commands.Internal.TransactedRegistryKey[] s_wellKnownHivesTx System.String ProviderName System.String charactersThatNeedEscaping",
            "DeclaredMethods": "Char get_AltItemSeparator() System.Management.Automation.PSDriveInfo NewDrive(System.Management.Automation.PSDriveInfo) System.Collections.ObjectModel.Collection`1[System.Management.Automation.PSDriveInfo] InitializeDefaultDrives() Boolean IsValidPath(System.String) Void GetItem(System.String) Void SetItem(System.String, System.Object) System.Object SetItemDynamicParameters(System.String, System.Object) Void ClearItem(System.String) Void GetChildItems(System.String, Boolean, UInt32) Void GetChildNames(System.String, System.Management.Automation.ReturnContainers) System.String EscapeSpecialChars(System.String) System.String EscapeChildName(System.String) Void RenameItem(System.String, System.String) Void NewItem(System.String, System.String, System.Object) Void RemoveItem(System.String, Boolean) Boolean ItemExists(System.String) Boolean HasChildItems(System.String) Void CopyItem(System.String, System.String, Boolean) Boolean CopyRegistryKey(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.String, Boolean, Boolean, Boolean) Boolean ErrorIfDestinationIsSourceOrChildOfSource(System.String, System.String) Boolean IsItemContainer(System.String) Void MoveItem(System.String, System.String) Void MoveRegistryItem(System.String, System.String) Void GetProperty(System.String, System.Collections.ObjectModel.Collection`1[System.String]) Void SetProperty(System.String, System.Management.Automation.PSObject) System.Object SetPropertyDynamicParameters(System.String, System.Management.Automation.PSObject) Void ClearProperty(System.String, System.Collections.ObjectModel.Collection`1[System.String]) System.Object GetPropertyDynamicParameters(System.String, System.Collections.ObjectModel.Collection`1[System.String]) System.Object ClearPropertyDynamicParameters(System.String, System.Collections.ObjectModel.Collection`1[System.String]) Void NewProperty(System.String, System.String, System.String, System.Object) Void RemoveProperty(System.String, System.String) Void RenameProperty(System.String, System.String, System.String) Void CopyProperty(System.String, System.String, System.String, System.String) Void MoveProperty(System.String, System.String, System.String, System.String) System.String GetParentPath(System.String, System.String) System.String GetChildName(System.String) System.String EnsureDriveIsRooted(System.String) System.Object NewPropertyDynamicParameters(System.String, System.String, System.String, System.Object) System.Object RemovePropertyDynamicParameters(System.String, System.String) System.Object RenamePropertyDynamicParameters(System.String, System.String, System.String) System.Object CopyPropertyDynamicParameters(System.String, System.String, System.String, System.String) System.Object MovePropertyDynamicParameters(System.String, System.String, System.String, System.String) Void CopyProperty(Microsoft.PowerShell.Commands.IRegistryWrapper, Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.String, Boolean) Void MoveProperty(Microsoft.PowerShell.Commands.IRegistryWrapper, Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.String) System.String NormalizePath(System.String) Boolean HasRelativePathTokens(System.String) Void GetFilteredRegistryKeyProperties(System.String, System.Collections.ObjectModel.Collection`1[System.String], Boolean, Boolean, Microsoft.PowerShell.Commands.IRegistryWrapper ByRef, System.Collections.ObjectModel.Collection`1[System.String] ByRef) Void WriteErrorIfPerfectMatchNotFound(Boolean, System.String, System.String) System.Object ResetRegistryKeyValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) Boolean IsHiveContainer(System.String) Boolean CheckOperationNotAllowedOnHiveContainer(System.String) Boolean CheckOperationNotAllowedOnHiveContainer(System.String, System.String) Microsoft.PowerShell.Commands.IRegistryWrapper GetHiveRoot(System.String) Boolean CreateIntermediateKeys(System.String) Microsoft.PowerShell.Commands.IRegistryWrapper GetRegkeyForPathWriteIfError(System.String, Boolean) Microsoft.PowerShell.Commands.IRegistryWrapper GetRegkeyForPath(System.String, Boolean) Void SetRegistryValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.Object, Microsoft.Win32.RegistryValueKind, System.String) Void SetRegistryValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.Object, Microsoft.Win32.RegistryValueKind, System.String, Boolean) Void WriteWrappedPropertyObject(System.Object, System.String, System.String) System.Object ConvertValueToKind(System.Object, Microsoft.Win32.RegistryValueKind) Microsoft.Win32.RegistryValueKind GetValueKindFromObject(System.Object) Microsoft.Win32.RegistryValueKind GetValueKindForProperty(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) System.Object ReadExistingKeyValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) Void WriteRegistryItemObject(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) Boolean ParseKind(System.String, Microsoft.Win32.RegistryValueKind ByRef) System.String get_LocalizedDefaultToken() System.String GetPropertyName(System.String) Void GetSecurityDescriptor(System.String, System.Security.AccessControl.AccessControlSections) Void SetSecurityDescriptor(System.String, System.Security.AccessControl.ObjectSecurity) System.Security.AccessControl.ObjectSecurity NewSecurityDescriptorFromPath(System.String, System.Security.AccessControl.AccessControlSections) System.Security.AccessControl.ObjectSecurity NewSecurityDescriptorOfType(System.String, System.Security.AccessControl.AccessControlSections)",
            "DeclaredNestedTypes": "",
            "DeclaredProperties": "Char AltItemSeparator System.String LocalizedDefaultToken",
            "ImplementedInterfaces": "System.Management.Automation.IResourceSupplier System.Management.Automation.Provider.IPropertyCmdletProvider System.Management.Automation.Provider.IDynamicPropertyCmdletProvider System.Management.Automation.Provider.ISecurityDescriptorCmdletProvider",
            "IsNested": false,
            "IsArray": false,
            "IsByRef": false,
            "IsPointer": false,
            "IsGenericTypeParameter": false,
            "IsGenericMethodParameter": false,
            "IsVariableBoundArray": false,
            "HasElementType": false,
            "GenericTypeArguments": "",
            "Attributes": 1048833,
            "IsAbstract": false,
            "IsImport": false,
            "IsSealed": true,
            "IsSpecialName": false,
            "IsClass": true,
            "IsNestedAssembly": false,
            "IsNestedFamANDAssem": false,
            "IsNestedFamily": false,
            "IsNestedFamORAssem": false,
            "IsNestedPrivate": false,
            "IsNestedPublic": false,
            "IsNotPublic": false,
            "IsPublic": true,
            "IsAutoLayout": true,
            "IsExplicitLayout": false,
            "IsLayoutSequential": false,
            "IsAnsiClass": true,
            "IsAutoClass": false,
            "IsUnicodeClass": false,
            "IsCOMObject": false,
            "IsContextful": false,
            "IsMarshalByRef": false,
            "IsPrimitive": false,
            "IsValueType": false,
            "IsSignatureType": false,
            "TypeInitializer": "Void .cctor()",
            "IsSerializable": false,
            "IsVisible": true,
            "CustomAttributes": "[System.Management.Automation.Provider.CmdletProviderAttribute(\"Registry\", (System.Management.Automation.Provider.ProviderCapabilities)16)] [System.Management.Automation.OutputTypeAttribute(typeof(System.String), ProviderCmdlet = \"Move-ItemProperty\")] [System.Management.Automation.OutputTypeAttribute(new Type[2] { typeof(Microsoft.Win32.RegistryKey), typeof(System.String) }, ProviderCmdlet = \"Get-ChildItem\")] [System.Management.Automation.OutputTypeAttribute(typeof(Microsoft.Win32.RegistryKey), ProviderCmdlet = \"Get-Item\")] [System.Management.Automation.OutputTypeAttribute(typeof(System.Security.AccessControl.RegistrySecurity), ProviderCmdlet = \"Get-Acl\")] [System.Management.Automation.OutputTypeAttribute(typeof(Microsoft.Win32.RegistryKey), ProviderCmdlet = \"Get-ChildItem\")] [System.Management.Automation.OutputTypeAttribute(typeof(Microsoft.Win32.RegistryKey), ProviderCmdlet = \"Get-Item\")] [System.Management.Automation.OutputTypeAttribute(new Type[4] { typeof(Microsoft.Win32.RegistryKey), typeof(System.String), typeof(System.Int32), typeof(System.Int64) }, ProviderCmdlet = \"Get-ItemProperty\")] [System.Management.Automation.OutputTypeAttribute(typeof(Microsoft.Win32.RegistryKey), ProviderCmdlet = \"New-Item\")] [System.Management.Automation.OutputTypeAttribute(new Type[2] { typeof(System.String), typeof(System.Management.Automation.PathInfo) }, ProviderCmdlet = \"Resolve-Path\")] [System.Management.Automation.OutputTypeAttribute(typeof(System.Management.Automation.PathInfo), ProviderCmdlet = \"Push-Location\")] [System.Management.Automation.OutputTypeAttribute(typeof(System.Management.Automation.PathInfo), ProviderCmdlet = \"Pop-Location\")]"
          },
          "HelpFile": "System.Management.Automation.dll-Help.xml",
          "Name": "Registry",
          "PSSnapIn": {
            "Name": "Microsoft.PowerShell.Core",
            "IsDefault": true,
            "ApplicationBase": "C:\\Program Files\\PowerShell\\7",
            "AssemblyName": "System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35",
            "ModuleName": "C:\\Program Files\\PowerShell\\7\\System.Management.Automation.dll",
            "PSVersion": "7.5.1",
            "Version": "7.5.0.500",
            "Types": "types.ps1xml typesv3.ps1xml",
            "Formats": "Certificate.format.ps1xml DotNetTypes.format.ps1xml FileSystem.format.ps1xml Help.format.ps1xml HelpV3.format.ps1xml PowerShellCore.format.ps1xml PowerShellTrace.format.ps1xml Registry.format.ps1xml",
            "Description": null,
            "Vendor": null,
            "LogPipelineExecutionDetails": false
          },
          "ModuleName": "Microsoft.PowerShell.Core",
          "Module": null,
          "Description": "",
          "Capabilities": 16,
          "Home": "",
          "Drives": [
            "HKLM",
            "HKCU"
          ],
          "VolumeSeparatedByColon": true,
          "ItemSeparator": "\\",
          "AltItemSeparator": "\\"
        },
        "Root": "HKEY_CURRENT_USER",
        "Description": "The software settings for the current user",
        "MaximumSize": null,
        "Credential": {
          "UserName": null,
          "Password": null
        },
        "DisplayRoot": null,
        "VolumeSeparatedByColon": true
      },
      "Location": "HKCU\\Run",
      "User": "jimmy"
    },
    {
      "Name": "SecurityHealth",
      "Command": "C:\\WINDOWS\\system32\\SecurityHealthSystray.exe",
      "Location": "HKLM\\Run",
      "User": "All Users"
    },
    {
      "Name": "Everything 1.5a",
      "Command": "\"C:\\Program Files\\Everything 1.5a\\Everything64.exe\" -startup",
      "Location": "HKLM\\Run",
      "User": "All Users"
    },
    {
      "Name": "RtkAudUService",
      "Command": "\"C:\\WINDOWS\\System32\\DriverStore\\FileRepository\\realtekservice.inf_amd64_5585cd55bed009c8\\RtkAudUService64.exe\" -background",
      "Location": "HKLM\\Run",
      "User": "All Users"
    },
    {
      "Name": "SteelSeriesGG",
      "Command": "\"C:\\Program Files\\SteelSeries\\GG\\SteelSeriesGG.exe\" -dataPath=\"C:\\ProgramData\\SteelSeries\\GG\" -dbEnv=production -auto=true",
      "Location": "HKLM\\Run",
      "User": "All Users"
    },
    {
      "Name": "PSDrive",
      "Command": {
        "CurrentLocation": "",
        "Name": "HKLM",
        "Provider": {
          "ImplementingType": {
            "IsCollectible": false,
            "DeclaringMethod": null,
            "FullName": "Microsoft.PowerShell.Commands.RegistryProvider",
            "AssemblyQualifiedName": "Microsoft.PowerShell.Commands.RegistryProvider, System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35",
            "Namespace": "Microsoft.PowerShell.Commands",
            "GUID": "44a9fa1a-7d61-3ecb-94ef-b075342b593a",
            "IsEnum": false,
            "IsByRefLike": false,
            "IsConstructedGenericType": false,
            "IsGenericType": false,
            "IsGenericTypeDefinition": false,
            "GenericParameterAttributes": null,
            "IsSZArray": false,
            "GenericParameterPosition": null,
            "ContainsGenericParameters": false,
            "StructLayoutAttribute": "System.Runtime.InteropServices.StructLayoutAttribute",
            "IsFunctionPointer": false,
            "IsUnmanagedFunctionPointer": false,
            "Name": "RegistryProvider",
            "DeclaringType": null,
            "Assembly": "System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35",
            "BaseType": "System.Management.Automation.Provider.NavigationCmdletProvider",
            "IsGenericParameter": false,
            "IsTypeDefinition": true,
            "IsSecurityCritical": true,
            "IsSecuritySafeCritical": false,
            "IsSecurityTransparent": false,
            "MemberType": 32,
            "MetadataToken": 33556360,
            "Module": "System.Management.Automation.dll",
            "ReflectedType": null,
            "TypeHandle": "System.RuntimeTypeHandle",
            "UnderlyingSystemType": "Microsoft.PowerShell.Commands.RegistryProvider",
            "GenericTypeParameters": "",
            "DeclaredConstructors": "Void .ctor() Void .cctor()",
            "DeclaredEvents": "",
            "DeclaredFields": "System.Management.Automation.PSTraceSource s_tracer System.String[] s_hiveNames System.String[] s_hiveShortNames Microsoft.Win32.RegistryKey[] s_wellKnownHives Microsoft.PowerShell.Commands.Internal.TransactedRegistryKey[] s_wellKnownHivesTx System.String ProviderName System.String charactersThatNeedEscaping",
            "DeclaredMembers": "Char get_AltItemSeparator() System.Management.Automation.PSDriveInfo NewDrive(System.Management.Automation.PSDriveInfo) System.Collections.ObjectModel.Collection`1[System.Management.Automation.PSDriveInfo] InitializeDefaultDrives() Boolean IsValidPath(System.String) Void GetItem(System.String) Void SetItem(System.String, System.Object) System.Object SetItemDynamicParameters(System.String, System.Object) Void ClearItem(System.String) Void GetChildItems(System.String, Boolean, UInt32) Void GetChildNames(System.String, System.Management.Automation.ReturnContainers) System.String EscapeSpecialChars(System.String) System.String EscapeChildName(System.String) Void RenameItem(System.String, System.String) Void NewItem(System.String, System.String, System.Object) Void RemoveItem(System.String, Boolean) Boolean ItemExists(System.String) Boolean HasChildItems(System.String) Void CopyItem(System.String, System.String, Boolean) Boolean CopyRegistryKey(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.String, Boolean, Boolean, Boolean) Boolean ErrorIfDestinationIsSourceOrChildOfSource(System.String, System.String) Boolean IsItemContainer(System.String) Void MoveItem(System.String, System.String) Void MoveRegistryItem(System.String, System.String) Void GetProperty(System.String, System.Collections.ObjectModel.Collection`1[System.String]) Void SetProperty(System.String, System.Management.Automation.PSObject) System.Object SetPropertyDynamicParameters(System.String, System.Management.Automation.PSObject) Void ClearProperty(System.String, System.Collections.ObjectModel.Collection`1[System.String]) System.Object GetPropertyDynamicParameters(System.String, System.Collections.ObjectModel.Collection`1[System.String]) System.Object ClearPropertyDynamicParameters(System.String, System.Collections.ObjectModel.Collection`1[System.String]) Void NewProperty(System.String, System.String, System.String, System.Object) Void RemoveProperty(System.String, System.String) Void RenameProperty(System.String, System.String, System.String) Void CopyProperty(System.String, System.String, System.String, System.String) Void MoveProperty(System.String, System.String, System.String, System.String) System.String GetParentPath(System.String, System.String) System.String GetChildName(System.String) System.String EnsureDriveIsRooted(System.String) System.Object NewPropertyDynamicParameters(System.String, System.String, System.String, System.Object) System.Object RemovePropertyDynamicParameters(System.String, System.String) System.Object RenamePropertyDynamicParameters(System.String, System.String, System.String) System.Object CopyPropertyDynamicParameters(System.String, System.String, System.String, System.String) System.Object MovePropertyDynamicParameters(System.String, System.String, System.String, System.String) Void CopyProperty(Microsoft.PowerShell.Commands.IRegistryWrapper, Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.String, Boolean) Void MoveProperty(Microsoft.PowerShell.Commands.IRegistryWrapper, Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.String) System.String NormalizePath(System.String) Boolean HasRelativePathTokens(System.String) Void GetFilteredRegistryKeyProperties(System.String, System.Collections.ObjectModel.Collection`1[System.String], Boolean, Boolean, Microsoft.PowerShell.Commands.IRegistryWrapper ByRef, System.Collections.ObjectModel.Collection`1[System.String] ByRef) Void WriteErrorIfPerfectMatchNotFound(Boolean, System.String, System.String) System.Object ResetRegistryKeyValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) Boolean IsHiveContainer(System.String) Boolean CheckOperationNotAllowedOnHiveContainer(System.String) Boolean CheckOperationNotAllowedOnHiveContainer(System.String, System.String) Microsoft.PowerShell.Commands.IRegistryWrapper GetHiveRoot(System.String) Boolean CreateIntermediateKeys(System.String) Microsoft.PowerShell.Commands.IRegistryWrapper GetRegkeyForPathWriteIfError(System.String, Boolean) Microsoft.PowerShell.Commands.IRegistryWrapper GetRegkeyForPath(System.String, Boolean) Void SetRegistryValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.Object, Microsoft.Win32.RegistryValueKind, System.String) Void SetRegistryValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.Object, Microsoft.Win32.RegistryValueKind, System.String, Boolean) Void WriteWrappedPropertyObject(System.Object, System.String, System.String) System.Object ConvertValueToKind(System.Object, Microsoft.Win32.RegistryValueKind) Microsoft.Win32.RegistryValueKind GetValueKindFromObject(System.Object) Microsoft.Win32.RegistryValueKind GetValueKindForProperty(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) System.Object ReadExistingKeyValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) Void WriteRegistryItemObject(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) Boolean ParseKind(System.String, Microsoft.Win32.RegistryValueKind ByRef) System.String get_LocalizedDefaultToken() System.String GetPropertyName(System.String) Void GetSecurityDescriptor(System.String, System.Security.AccessControl.AccessControlSections) Void SetSecurityDescriptor(System.String, System.Security.AccessControl.ObjectSecurity) System.Security.AccessControl.ObjectSecurity NewSecurityDescriptorFromPath(System.String, System.Security.AccessControl.AccessControlSections) System.Security.AccessControl.ObjectSecurity NewSecurityDescriptorOfType(System.String, System.Security.AccessControl.AccessControlSections) Void .ctor() Void .cctor() Char AltItemSeparator System.String LocalizedDefaultToken System.Management.Automation.PSTraceSource s_tracer System.String[] s_hiveNames System.String[] s_hiveShortNames Microsoft.Win32.RegistryKey[] s_wellKnownHives Microsoft.PowerShell.Commands.Internal.TransactedRegistryKey[] s_wellKnownHivesTx System.String ProviderName System.String charactersThatNeedEscaping",
            "DeclaredMethods": "Char get_AltItemSeparator() System.Management.Automation.PSDriveInfo NewDrive(System.Management.Automation.PSDriveInfo) System.Collections.ObjectModel.Collection`1[System.Management.Automation.PSDriveInfo] InitializeDefaultDrives() Boolean IsValidPath(System.String) Void GetItem(System.String) Void SetItem(System.String, System.Object) System.Object SetItemDynamicParameters(System.String, System.Object) Void ClearItem(System.String) Void GetChildItems(System.String, Boolean, UInt32) Void GetChildNames(System.String, System.Management.Automation.ReturnContainers) System.String EscapeSpecialChars(System.String) System.String EscapeChildName(System.String) Void RenameItem(System.String, System.String) Void NewItem(System.String, System.String, System.Object) Void RemoveItem(System.String, Boolean) Boolean ItemExists(System.String) Boolean HasChildItems(System.String) Void CopyItem(System.String, System.String, Boolean) Boolean CopyRegistryKey(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.String, Boolean, Boolean, Boolean) Boolean ErrorIfDestinationIsSourceOrChildOfSource(System.String, System.String) Boolean IsItemContainer(System.String) Void MoveItem(System.String, System.String) Void MoveRegistryItem(System.String, System.String) Void GetProperty(System.String, System.Collections.ObjectModel.Collection`1[System.String]) Void SetProperty(System.String, System.Management.Automation.PSObject) System.Object SetPropertyDynamicParameters(System.String, System.Management.Automation.PSObject) Void ClearProperty(System.String, System.Collections.ObjectModel.Collection`1[System.String]) System.Object GetPropertyDynamicParameters(System.String, System.Collections.ObjectModel.Collection`1[System.String]) System.Object ClearPropertyDynamicParameters(System.String, System.Collections.ObjectModel.Collection`1[System.String]) Void NewProperty(System.String, System.String, System.String, System.Object) Void RemoveProperty(System.String, System.String) Void RenameProperty(System.String, System.String, System.String) Void CopyProperty(System.String, System.String, System.String, System.String) Void MoveProperty(System.String, System.String, System.String, System.String) System.String GetParentPath(System.String, System.String) System.String GetChildName(System.String) System.String EnsureDriveIsRooted(System.String) System.Object NewPropertyDynamicParameters(System.String, System.String, System.String, System.Object) System.Object RemovePropertyDynamicParameters(System.String, System.String) System.Object RenamePropertyDynamicParameters(System.String, System.String, System.String) System.Object CopyPropertyDynamicParameters(System.String, System.String, System.String, System.String) System.Object MovePropertyDynamicParameters(System.String, System.String, System.String, System.String) Void CopyProperty(Microsoft.PowerShell.Commands.IRegistryWrapper, Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.String, Boolean) Void MoveProperty(Microsoft.PowerShell.Commands.IRegistryWrapper, Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.String) System.String NormalizePath(System.String) Boolean HasRelativePathTokens(System.String) Void GetFilteredRegistryKeyProperties(System.String, System.Collections.ObjectModel.Collection`1[System.String], Boolean, Boolean, Microsoft.PowerShell.Commands.IRegistryWrapper ByRef, System.Collections.ObjectModel.Collection`1[System.String] ByRef) Void WriteErrorIfPerfectMatchNotFound(Boolean, System.String, System.String) System.Object ResetRegistryKeyValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) Boolean IsHiveContainer(System.String) Boolean CheckOperationNotAllowedOnHiveContainer(System.String) Boolean CheckOperationNotAllowedOnHiveContainer(System.String, System.String) Microsoft.PowerShell.Commands.IRegistryWrapper GetHiveRoot(System.String) Boolean CreateIntermediateKeys(System.String) Microsoft.PowerShell.Commands.IRegistryWrapper GetRegkeyForPathWriteIfError(System.String, Boolean) Microsoft.PowerShell.Commands.IRegistryWrapper GetRegkeyForPath(System.String, Boolean) Void SetRegistryValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.Object, Microsoft.Win32.RegistryValueKind, System.String) Void SetRegistryValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String, System.Object, Microsoft.Win32.RegistryValueKind, System.String, Boolean) Void WriteWrappedPropertyObject(System.Object, System.String, System.String) System.Object ConvertValueToKind(System.Object, Microsoft.Win32.RegistryValueKind) Microsoft.Win32.RegistryValueKind GetValueKindFromObject(System.Object) Microsoft.Win32.RegistryValueKind GetValueKindForProperty(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) System.Object ReadExistingKeyValue(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) Void WriteRegistryItemObject(Microsoft.PowerShell.Commands.IRegistryWrapper, System.String) Boolean ParseKind(System.String, Microsoft.Win32.RegistryValueKind ByRef) System.String get_LocalizedDefaultToken() System.String GetPropertyName(System.String) Void GetSecurityDescriptor(System.String, System.Security.AccessControl.AccessControlSections) Void SetSecurityDescriptor(System.String, System.Security.AccessControl.ObjectSecurity) System.Security.AccessControl.ObjectSecurity NewSecurityDescriptorFromPath(System.String, System.Security.AccessControl.AccessControlSections) System.Security.AccessControl.ObjectSecurity NewSecurityDescriptorOfType(System.String, System.Security.AccessControl.AccessControlSections)",
            "DeclaredNestedTypes": "",
            "DeclaredProperties": "Char AltItemSeparator System.String LocalizedDefaultToken",
            "ImplementedInterfaces": "System.Management.Automation.IResourceSupplier System.Management.Automation.Provider.IPropertyCmdletProvider System.Management.Automation.Provider.IDynamicPropertyCmdletProvider System.Management.Automation.Provider.ISecurityDescriptorCmdletProvider",
            "IsNested": false,
            "IsArray": false,
            "IsByRef": false,
            "IsPointer": false,
            "IsGenericTypeParameter": false,
            "IsGenericMethodParameter": false,
            "IsVariableBoundArray": false,
            "HasElementType": false,
            "GenericTypeArguments": "",
            "Attributes": 1048833,
            "IsAbstract": false,
            "IsImport": false,
            "IsSealed": true,
            "IsSpecialName": false,
            "IsClass": true,
            "IsNestedAssembly": false,
            "IsNestedFamANDAssem": false,
            "IsNestedFamily": false,
            "IsNestedFamORAssem": false,
            "IsNestedPrivate": false,
            "IsNestedPublic": false,
            "IsNotPublic": false,
            "IsPublic": true,
            "IsAutoLayout": true,
            "IsExplicitLayout": false,
            "IsLayoutSequential": false,
            "IsAnsiClass": true,
            "IsAutoClass": false,
            "IsUnicodeClass": false,
            "IsCOMObject": false,
            "IsContextful": false,
            "IsMarshalByRef": false,
            "IsPrimitive": false,
            "IsValueType": false,
            "IsSignatureType": false,
            "TypeInitializer": "Void .cctor()",
            "IsSerializable": false,
            "IsVisible": true,
            "CustomAttributes": "[System.Management.Automation.Provider.CmdletProviderAttribute(\"Registry\", (System.Management.Automation.Provider.ProviderCapabilities)16)] [System.Management.Automation.OutputTypeAttribute(typeof(System.String), ProviderCmdlet = \"Move-ItemProperty\")] [System.Management.Automation.OutputTypeAttribute(new Type[2] { typeof(Microsoft.Win32.RegistryKey), typeof(System.String) }, ProviderCmdlet = \"Get-ChildItem\")] [System.Management.Automation.OutputTypeAttribute(typeof(Microsoft.Win32.RegistryKey), ProviderCmdlet = \"Get-Item\")] [System.Management.Automation.OutputTypeAttribute(typeof(System.Security.AccessControl.RegistrySecurity), ProviderCmdlet = \"Get-Acl\")] [System.Management.Automation.OutputTypeAttribute(typeof(Microsoft.Win32.RegistryKey), ProviderCmdlet = \"Get-ChildItem\")] [System.Management.Automation.OutputTypeAttribute(typeof(Microsoft.Win32.RegistryKey), ProviderCmdlet = \"Get-Item\")] [System.Management.Automation.OutputTypeAttribute(new Type[4] { typeof(Microsoft.Win32.RegistryKey), typeof(System.String), typeof(System.Int32), typeof(System.Int64) }, ProviderCmdlet = \"Get-ItemProperty\")] [System.Management.Automation.OutputTypeAttribute(typeof(Microsoft.Win32.RegistryKey), ProviderCmdlet = \"New-Item\")] [System.Management.Automation.OutputTypeAttribute(new Type[2] { typeof(System.String), typeof(System.Management.Automation.PathInfo) }, ProviderCmdlet = \"Resolve-Path\")] [System.Management.Automation.OutputTypeAttribute(typeof(System.Management.Automation.PathInfo), ProviderCmdlet = \"Push-Location\")] [System.Management.Automation.OutputTypeAttribute(typeof(System.Management.Automation.PathInfo), ProviderCmdlet = \"Pop-Location\")]"
          },
          "HelpFile": "System.Management.Automation.dll-Help.xml",
          "Name": "Registry",
          "PSSnapIn": {
            "Name": "Microsoft.PowerShell.Core",
            "IsDefault": true,
            "ApplicationBase": "C:\\Program Files\\PowerShell\\7",
            "AssemblyName": "System.Management.Automation, Version=7.5.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35",
            "ModuleName": "C:\\Program Files\\PowerShell\\7\\System.Management.Automation.dll",
            "PSVersion": "7.5.1",
            "Version": "7.5.0.500",
            "Types": "types.ps1xml typesv3.ps1xml",
            "Formats": "Certificate.format.ps1xml DotNetTypes.format.ps1xml FileSystem.format.ps1xml Help.format.ps1xml HelpV3.format.ps1xml PowerShellCore.format.ps1xml PowerShellTrace.format.ps1xml Registry.format.ps1xml",
            "Description": null,
            "Vendor": null,
            "LogPipelineExecutionDetails": false
          },
          "ModuleName": "Microsoft.PowerShell.Core",
          "Module": null,
          "Description": "",
          "Capabilities": 16,
          "Home": "",
          "Drives": [
            "HKLM",
            "HKCU"
          ],
          "VolumeSeparatedByColon": true,
          "ItemSeparator": "\\",
          "AltItemSeparator": "\\"
        },
        "Root": "HKEY_LOCAL_MACHINE",
        "Description": "The configuration settings for the local computer",
        "MaximumSize": null,
        "Credential": {
          "UserName": null,
          "Password": null
        },
        "DisplayRoot": null,
        "VolumeSeparatedByColon": true
      },
      "Location": "HKLM\\Run",
      "User": "All Users"
    },
    {
      "Name": "Espanso",
      "Command": "Espanso.lnk",
      "Location": "Startup",
      "User": "DESKTOP-MSI\\jimmy"
    },
    {
      "Name": "SecurityHealth",
      "Command": "%windir%\\system32\\SecurityHealthSystray.exe",
      "Location": "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
      "User": "Public"
    }
  ],
  "NonEssentialStartupItems": [
    {
      "Name": "OneDrive",
      "Command": "\"C:\\Program Files\\Microsoft OneDrive\\OneDrive.exe\" /background",
      "Location": "HKCU\\Run",
      "User": "jimmy"
    },
    {
      "Name": "GoogleDriveFS",
      "Command": "\"C:\\Program Files\\Google\\Drive File Stream\\108.0.1.0\\GoogleDriveFS.exe\" --startup_mode",
      "Location": "HKCU\\Run",
      "User": "jimmy"
    }
  ],
  "Timestamp": "2025-05-21 22:10:36"
}
